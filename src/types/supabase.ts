/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/abilities": {
    get: {
      parameters: {
        query: {
          ability_name?: parameters["rowFilter.abilities.ability_name"];
          description?: parameters["rowFilter.abilities.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["abilities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** abilities */
          abilities?: definitions["abilities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ability_name?: parameters["rowFilter.abilities.ability_name"];
          description?: parameters["rowFilter.abilities.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ability_name?: parameters["rowFilter.abilities.ability_name"];
          description?: parameters["rowFilter.abilities.description"];
        };
        body: {
          /** abilities */
          abilities?: definitions["abilities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/actypes": {
    get: {
      parameters: {
        query: {
          acquisition_type?: parameters["rowFilter.actypes.acquisition_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["actypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** actypes */
          actypes?: definitions["actypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          acquisition_type?: parameters["rowFilter.actypes.acquisition_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          acquisition_type?: parameters["rowFilter.actypes.acquisition_type"];
        };
        body: {
          /** actypes */
          actypes?: definitions["actypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/attacktypes": {
    get: {
      parameters: {
        query: {
          attack_type?: parameters["rowFilter.attacktypes.attack_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["attacktypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** attacktypes */
          attacktypes?: definitions["attacktypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          attack_type?: parameters["rowFilter.attacktypes.attack_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          attack_type?: parameters["rowFilter.attacktypes.attack_type"];
        };
        body: {
          /** attacktypes */
          attacktypes?: definitions["attacktypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/buildinfo": {
    get: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildinfo.build_id"];
          build_name?: parameters["rowFilter.buildinfo.build_name"];
          monstie?: parameters["rowFilter.buildinfo.monstie"];
          creator_id?: parameters["rowFilter.buildinfo.creator_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["buildinfo"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** buildinfo */
          buildinfo?: definitions["buildinfo"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildinfo.build_id"];
          build_name?: parameters["rowFilter.buildinfo.build_name"];
          monstie?: parameters["rowFilter.buildinfo.monstie"];
          creator_id?: parameters["rowFilter.buildinfo.creator_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildinfo.build_id"];
          build_name?: parameters["rowFilter.buildinfo.build_name"];
          monstie?: parameters["rowFilter.buildinfo.monstie"];
          creator_id?: parameters["rowFilter.buildinfo.creator_id"];
        };
        body: {
          /** buildinfo */
          buildinfo?: definitions["buildinfo"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/buildpiece": {
    get: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildpiece.build_id"];
          g_id?: parameters["rowFilter.buildpiece.g_id"];
          place?: parameters["rowFilter.buildpiece.place"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["buildpiece"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** buildpiece */
          buildpiece?: definitions["buildpiece"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildpiece.build_id"];
          g_id?: parameters["rowFilter.buildpiece.g_id"];
          place?: parameters["rowFilter.buildpiece.place"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.buildpiece.build_id"];
          g_id?: parameters["rowFilter.buildpiece.g_id"];
          place?: parameters["rowFilter.buildpiece.place"];
        };
        body: {
          /** buildpiece */
          buildpiece?: definitions["buildpiece"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/egg": {
    get: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.egg.m_id"];
          pattern_type?: parameters["rowFilter.egg.pattern_type"];
          bg_color?: parameters["rowFilter.egg.bg_color"];
          pattern_color?: parameters["rowFilter.egg.pattern_color"];
          meta_colors?: parameters["rowFilter.egg.meta_colors"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["egg"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** egg */
          egg?: definitions["egg"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.egg.m_id"];
          pattern_type?: parameters["rowFilter.egg.pattern_type"];
          bg_color?: parameters["rowFilter.egg.bg_color"];
          pattern_color?: parameters["rowFilter.egg.pattern_color"];
          meta_colors?: parameters["rowFilter.egg.meta_colors"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.egg.m_id"];
          pattern_type?: parameters["rowFilter.egg.pattern_type"];
          bg_color?: parameters["rowFilter.egg.bg_color"];
          pattern_color?: parameters["rowFilter.egg.pattern_color"];
          meta_colors?: parameters["rowFilter.egg.meta_colors"];
        };
        body: {
          /** egg */
          egg?: definitions["egg"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/eggpattern": {
    get: {
      parameters: {
        query: {
          pattern_type?: parameters["rowFilter.eggpattern.pattern_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["eggpattern"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** eggpattern */
          eggpattern?: definitions["eggpattern"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          pattern_type?: parameters["rowFilter.eggpattern.pattern_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          pattern_type?: parameters["rowFilter.eggpattern.pattern_type"];
        };
        body: {
          /** eggpattern */
          eggpattern?: definitions["eggpattern"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/elements": {
    get: {
      parameters: {
        query: {
          element_type?: parameters["rowFilter.elements.element_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["elements"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** elements */
          elements?: definitions["elements"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          element_type?: parameters["rowFilter.elements.element_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          element_type?: parameters["rowFilter.elements.element_type"];
        };
        body: {
          /** elements */
          elements?: definitions["elements"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/gene_skills": {
    get: {
      parameters: {
        query: {
          g_id?: parameters["rowFilter.gene_skills.g_id"];
          gene_name?: parameters["rowFilter.gene_skills.gene_name"];
          size_abbr?: parameters["rowFilter.gene_skills.size_abbr"];
          element_type?: parameters["rowFilter.gene_skills.element_type"];
          attack_type?: parameters["rowFilter.gene_skills.attack_type"];
          trait_type?: parameters["rowFilter.gene_skills.trait_type"];
          required_lvl?: parameters["rowFilter.gene_skills.required_lvl"];
          skill_name?: parameters["rowFilter.gene_skills.skill_name"];
          kinship_cost?: parameters["rowFilter.gene_skills.kinship_cost"];
          target?: parameters["rowFilter.gene_skills.target"];
          description?: parameters["rowFilter.gene_skills.description"];
          upgrade_0?: parameters["rowFilter.gene_skills.upgrade_0"];
          upgrade_1?: parameters["rowFilter.gene_skills.upgrade_1"];
          upgrade_2?: parameters["rowFilter.gene_skills.upgrade_2"];
          effect_1?: parameters["rowFilter.gene_skills.effect_1"];
          effect_2?: parameters["rowFilter.gene_skills.effect_2"];
          effect_3?: parameters["rowFilter.gene_skills.effect_3"];
          accuracy?: parameters["rowFilter.gene_skills.accuracy"];
          crit_rate_bonus?: parameters["rowFilter.gene_skills.crit_rate_bonus"];
          action_speed?: parameters["rowFilter.gene_skills.action_speed"];
          mv?: parameters["rowFilter.gene_skills.mv"];
          critable?: parameters["rowFilter.gene_skills.critable"];
          ai_use?: parameters["rowFilter.gene_skills.ai_use"];
          other_mods?: parameters["rowFilter.gene_skills.other_mods"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["gene_skills"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/genes": {
    get: {
      parameters: {
        query: {
          g_id?: parameters["rowFilter.genes.g_id"];
          gene_name?: parameters["rowFilter.genes.gene_name"];
          required_lvl?: parameters["rowFilter.genes.required_lvl"];
          gene_number?: parameters["rowFilter.genes.gene_number"];
          element_type?: parameters["rowFilter.genes.element_type"];
          attack_type?: parameters["rowFilter.genes.attack_type"];
          size_abbr?: parameters["rowFilter.genes.size_abbr"];
          trait_type?: parameters["rowFilter.genes.trait_type"];
          legal?: parameters["rowFilter.genes.legal"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["genes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** genes */
          genes?: definitions["genes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          g_id?: parameters["rowFilter.genes.g_id"];
          gene_name?: parameters["rowFilter.genes.gene_name"];
          required_lvl?: parameters["rowFilter.genes.required_lvl"];
          gene_number?: parameters["rowFilter.genes.gene_number"];
          element_type?: parameters["rowFilter.genes.element_type"];
          attack_type?: parameters["rowFilter.genes.attack_type"];
          size_abbr?: parameters["rowFilter.genes.size_abbr"];
          trait_type?: parameters["rowFilter.genes.trait_type"];
          legal?: parameters["rowFilter.genes.legal"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          g_id?: parameters["rowFilter.genes.g_id"];
          gene_name?: parameters["rowFilter.genes.gene_name"];
          required_lvl?: parameters["rowFilter.genes.required_lvl"];
          gene_number?: parameters["rowFilter.genes.gene_number"];
          element_type?: parameters["rowFilter.genes.element_type"];
          attack_type?: parameters["rowFilter.genes.attack_type"];
          size_abbr?: parameters["rowFilter.genes.size_abbr"];
          trait_type?: parameters["rowFilter.genes.trait_type"];
          legal?: parameters["rowFilter.genes.legal"];
        };
        body: {
          /** genes */
          genes?: definitions["genes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/genus": {
    get: {
      parameters: {
        query: {
          genus_type?: parameters["rowFilter.genus.genus_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["genus"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** genus */
          genus?: definitions["genus"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          genus_type?: parameters["rowFilter.genus.genus_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          genus_type?: parameters["rowFilter.genus.genus_type"];
        };
        body: {
          /** genus */
          genus?: definitions["genus"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/monsters": {
    get: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.monsters.m_id"];
          monster_name?: parameters["rowFilter.monsters.monster_name"];
          ability_1?: parameters["rowFilter.monsters.ability_1"];
          ability_2?: parameters["rowFilter.monsters.ability_2"];
          element_strength?: parameters["rowFilter.monsters.element_strength"];
          element_weakness?: parameters["rowFilter.monsters.element_weakness"];
          attack_type?: parameters["rowFilter.monsters.attack_type"];
          genus?: parameters["rowFilter.monsters.genus"];
          rarity?: parameters["rowFilter.monsters.rarity"];
          habitat?: parameters["rowFilter.monsters.habitat"];
          hatchable?: parameters["rowFilter.monsters.hatchable"];
          retreat_condition?: parameters["rowFilter.monsters.retreat_condition"];
          img_url?: parameters["rowFilter.monsters.img_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["monsters"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** monsters */
          monsters?: definitions["monsters"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.monsters.m_id"];
          monster_name?: parameters["rowFilter.monsters.monster_name"];
          ability_1?: parameters["rowFilter.monsters.ability_1"];
          ability_2?: parameters["rowFilter.monsters.ability_2"];
          element_strength?: parameters["rowFilter.monsters.element_strength"];
          element_weakness?: parameters["rowFilter.monsters.element_weakness"];
          attack_type?: parameters["rowFilter.monsters.attack_type"];
          genus?: parameters["rowFilter.monsters.genus"];
          rarity?: parameters["rowFilter.monsters.rarity"];
          habitat?: parameters["rowFilter.monsters.habitat"];
          hatchable?: parameters["rowFilter.monsters.hatchable"];
          retreat_condition?: parameters["rowFilter.monsters.retreat_condition"];
          img_url?: parameters["rowFilter.monsters.img_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.monsters.m_id"];
          monster_name?: parameters["rowFilter.monsters.monster_name"];
          ability_1?: parameters["rowFilter.monsters.ability_1"];
          ability_2?: parameters["rowFilter.monsters.ability_2"];
          element_strength?: parameters["rowFilter.monsters.element_strength"];
          element_weakness?: parameters["rowFilter.monsters.element_weakness"];
          attack_type?: parameters["rowFilter.monsters.attack_type"];
          genus?: parameters["rowFilter.monsters.genus"];
          rarity?: parameters["rowFilter.monsters.rarity"];
          habitat?: parameters["rowFilter.monsters.habitat"];
          hatchable?: parameters["rowFilter.monsters.hatchable"];
          retreat_condition?: parameters["rowFilter.monsters.retreat_condition"];
          img_url?: parameters["rowFilter.monsters.img_url"];
        };
        body: {
          /** monsters */
          monsters?: definitions["monsters"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/monsters_data": {
    get: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.monsters_data.m_id"];
          monster_name?: parameters["rowFilter.monsters_data.monster_name"];
          ability_1?: parameters["rowFilter.monsters_data.ability_1"];
          ability_2?: parameters["rowFilter.monsters_data.ability_2"];
          element_strength?: parameters["rowFilter.monsters_data.element_strength"];
          element_weakness?: parameters["rowFilter.monsters_data.element_weakness"];
          attack_type?: parameters["rowFilter.monsters_data.attack_type"];
          genus?: parameters["rowFilter.monsters_data.genus"];
          rarity?: parameters["rowFilter.monsters_data.rarity"];
          hatchable?: parameters["rowFilter.monsters_data.hatchable"];
          habitat?: parameters["rowFilter.monsters_data.habitat"];
          retreat_condition?: parameters["rowFilter.monsters_data.retreat_condition"];
          img_url?: parameters["rowFilter.monsters_data.img_url"];
          stat_type?: parameters["rowFilter.monsters_data.stat_type"];
          lvl?: parameters["rowFilter.monsters_data.lvl"];
          speed?: parameters["rowFilter.monsters_data.speed"];
          crit?: parameters["rowFilter.monsters_data.crit"];
          hp?: parameters["rowFilter.monsters_data.hp"];
          recovery?: parameters["rowFilter.monsters_data.recovery"];
          fire?: parameters["rowFilter.monsters_data.fire"];
          water?: parameters["rowFilter.monsters_data.water"];
          ice?: parameters["rowFilter.monsters_data.ice"];
          thunder?: parameters["rowFilter.monsters_data.thunder"];
          dragon?: parameters["rowFilter.monsters_data.dragon"];
          non_elemental?: parameters["rowFilter.monsters_data.non_elemental"];
          pattern_type?: parameters["rowFilter.monsters_data.pattern_type"];
          bg_color?: parameters["rowFilter.monsters_data.bg_color"];
          pattern_color?: parameters["rowFilter.monsters_data.pattern_color"];
          meta_colors?: parameters["rowFilter.monsters_data.meta_colors"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["monsters_data"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/sizes": {
    get: {
      parameters: {
        query: {
          size_abbr?: parameters["rowFilter.sizes.size_abbr"];
          size_value?: parameters["rowFilter.sizes.size_value"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["sizes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** sizes */
          sizes?: definitions["sizes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          size_abbr?: parameters["rowFilter.sizes.size_abbr"];
          size_value?: parameters["rowFilter.sizes.size_value"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          size_abbr?: parameters["rowFilter.sizes.size_abbr"];
          size_value?: parameters["rowFilter.sizes.size_value"];
        };
        body: {
          /** sizes */
          sizes?: definitions["sizes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/skills": {
    get: {
      parameters: {
        query: {
          skill_name?: parameters["rowFilter.skills.skill_name"];
          target?: parameters["rowFilter.skills.target"];
          kinship_cost?: parameters["rowFilter.skills.kinship_cost"];
          other_mods?: parameters["rowFilter.skills.other_mods"];
          mv?: parameters["rowFilter.skills.mv"];
          action_speed?: parameters["rowFilter.skills.action_speed"];
          accuracy?: parameters["rowFilter.skills.accuracy"];
          critable?: parameters["rowFilter.skills.critable"];
          crit_rate_bonus?: parameters["rowFilter.skills.crit_rate_bonus"];
          ai_use?: parameters["rowFilter.skills.ai_use"];
          description?: parameters["rowFilter.skills.description"];
          upgrade_0?: parameters["rowFilter.skills.upgrade_0"];
          upgrade_1?: parameters["rowFilter.skills.upgrade_1"];
          upgrade_2?: parameters["rowFilter.skills.upgrade_2"];
          effect_1?: parameters["rowFilter.skills.effect_1"];
          effect_2?: parameters["rowFilter.skills.effect_2"];
          effect_3?: parameters["rowFilter.skills.effect_3"];
          g_id?: parameters["rowFilter.skills.g_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["skills"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** skills */
          skills?: definitions["skills"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          skill_name?: parameters["rowFilter.skills.skill_name"];
          target?: parameters["rowFilter.skills.target"];
          kinship_cost?: parameters["rowFilter.skills.kinship_cost"];
          other_mods?: parameters["rowFilter.skills.other_mods"];
          mv?: parameters["rowFilter.skills.mv"];
          action_speed?: parameters["rowFilter.skills.action_speed"];
          accuracy?: parameters["rowFilter.skills.accuracy"];
          critable?: parameters["rowFilter.skills.critable"];
          crit_rate_bonus?: parameters["rowFilter.skills.crit_rate_bonus"];
          ai_use?: parameters["rowFilter.skills.ai_use"];
          description?: parameters["rowFilter.skills.description"];
          upgrade_0?: parameters["rowFilter.skills.upgrade_0"];
          upgrade_1?: parameters["rowFilter.skills.upgrade_1"];
          upgrade_2?: parameters["rowFilter.skills.upgrade_2"];
          effect_1?: parameters["rowFilter.skills.effect_1"];
          effect_2?: parameters["rowFilter.skills.effect_2"];
          effect_3?: parameters["rowFilter.skills.effect_3"];
          g_id?: parameters["rowFilter.skills.g_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          skill_name?: parameters["rowFilter.skills.skill_name"];
          target?: parameters["rowFilter.skills.target"];
          kinship_cost?: parameters["rowFilter.skills.kinship_cost"];
          other_mods?: parameters["rowFilter.skills.other_mods"];
          mv?: parameters["rowFilter.skills.mv"];
          action_speed?: parameters["rowFilter.skills.action_speed"];
          accuracy?: parameters["rowFilter.skills.accuracy"];
          critable?: parameters["rowFilter.skills.critable"];
          crit_rate_bonus?: parameters["rowFilter.skills.crit_rate_bonus"];
          ai_use?: parameters["rowFilter.skills.ai_use"];
          description?: parameters["rowFilter.skills.description"];
          upgrade_0?: parameters["rowFilter.skills.upgrade_0"];
          upgrade_1?: parameters["rowFilter.skills.upgrade_1"];
          upgrade_2?: parameters["rowFilter.skills.upgrade_2"];
          effect_1?: parameters["rowFilter.skills.effect_1"];
          effect_2?: parameters["rowFilter.skills.effect_2"];
          effect_3?: parameters["rowFilter.skills.effect_3"];
          g_id?: parameters["rowFilter.skills.g_id"];
        };
        body: {
          /** skills */
          skills?: definitions["skills"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/statline": {
    get: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.statline.m_id"];
          stat_type?: parameters["rowFilter.statline.stat_type"];
          lvl?: parameters["rowFilter.statline.lvl"];
          speed?: parameters["rowFilter.statline.speed"];
          crit?: parameters["rowFilter.statline.crit"];
          hp?: parameters["rowFilter.statline.hp"];
          recovery?: parameters["rowFilter.statline.recovery"];
          fire?: parameters["rowFilter.statline.fire"];
          water?: parameters["rowFilter.statline.water"];
          ice?: parameters["rowFilter.statline.ice"];
          thunder?: parameters["rowFilter.statline.thunder"];
          dragon?: parameters["rowFilter.statline.dragon"];
          non_elemental?: parameters["rowFilter.statline.non_elemental"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["statline"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** statline */
          statline?: definitions["statline"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.statline.m_id"];
          stat_type?: parameters["rowFilter.statline.stat_type"];
          lvl?: parameters["rowFilter.statline.lvl"];
          speed?: parameters["rowFilter.statline.speed"];
          crit?: parameters["rowFilter.statline.crit"];
          hp?: parameters["rowFilter.statline.hp"];
          recovery?: parameters["rowFilter.statline.recovery"];
          fire?: parameters["rowFilter.statline.fire"];
          water?: parameters["rowFilter.statline.water"];
          ice?: parameters["rowFilter.statline.ice"];
          thunder?: parameters["rowFilter.statline.thunder"];
          dragon?: parameters["rowFilter.statline.dragon"];
          non_elemental?: parameters["rowFilter.statline.non_elemental"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          m_id?: parameters["rowFilter.statline.m_id"];
          stat_type?: parameters["rowFilter.statline.stat_type"];
          lvl?: parameters["rowFilter.statline.lvl"];
          speed?: parameters["rowFilter.statline.speed"];
          crit?: parameters["rowFilter.statline.crit"];
          hp?: parameters["rowFilter.statline.hp"];
          recovery?: parameters["rowFilter.statline.recovery"];
          fire?: parameters["rowFilter.statline.fire"];
          water?: parameters["rowFilter.statline.water"];
          ice?: parameters["rowFilter.statline.ice"];
          thunder?: parameters["rowFilter.statline.thunder"];
          dragon?: parameters["rowFilter.statline.dragon"];
          non_elemental?: parameters["rowFilter.statline.non_elemental"];
        };
        body: {
          /** statline */
          statline?: definitions["statline"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stattypes": {
    get: {
      parameters: {
        query: {
          stat_type?: parameters["rowFilter.stattypes.stat_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stattypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stattypes */
          stattypes?: definitions["stattypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          stat_type?: parameters["rowFilter.stattypes.stat_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          stat_type?: parameters["rowFilter.stattypes.stat_type"];
        };
        body: {
          /** stattypes */
          stattypes?: definitions["stattypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/targettypes": {
    get: {
      parameters: {
        query: {
          target?: parameters["rowFilter.targettypes.target"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["targettypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** targettypes */
          targettypes?: definitions["targettypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          target?: parameters["rowFilter.targettypes.target"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          target?: parameters["rowFilter.targettypes.target"];
        };
        body: {
          /** targettypes */
          targettypes?: definitions["targettypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/traittypes": {
    get: {
      parameters: {
        query: {
          trait_type?: parameters["rowFilter.traittypes.trait_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["traittypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** traittypes */
          traittypes?: definitions["traittypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          trait_type?: parameters["rowFilter.traittypes.trait_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          trait_type?: parameters["rowFilter.traittypes.trait_type"];
        };
        body: {
          /** traittypes */
          traittypes?: definitions["traittypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/userbuilds": {
    get: {
      parameters: {
        query: {
          build_id?: parameters["rowFilter.userbuilds.build_id"];
          build_name?: parameters["rowFilter.userbuilds.build_name"];
          monstie?: parameters["rowFilter.userbuilds.monstie"];
          creator_id?: parameters["rowFilter.userbuilds.creator_id"];
          g_id?: parameters["rowFilter.userbuilds.g_id"];
          place?: parameters["rowFilter.userbuilds.place"];
          gene_name?: parameters["rowFilter.userbuilds.gene_name"];
          size_abbr?: parameters["rowFilter.userbuilds.size_abbr"];
          element_type?: parameters["rowFilter.userbuilds.element_type"];
          attack_type?: parameters["rowFilter.userbuilds.attack_type"];
          trait_type?: parameters["rowFilter.userbuilds.trait_type"];
          required_lvl?: parameters["rowFilter.userbuilds.required_lvl"];
          skill_name?: parameters["rowFilter.userbuilds.skill_name"];
          kinship_cost?: parameters["rowFilter.userbuilds.kinship_cost"];
          target?: parameters["rowFilter.userbuilds.target"];
          description?: parameters["rowFilter.userbuilds.description"];
          upgrade_0?: parameters["rowFilter.userbuilds.upgrade_0"];
          upgrade_1?: parameters["rowFilter.userbuilds.upgrade_1"];
          upgrade_2?: parameters["rowFilter.userbuilds.upgrade_2"];
          effect_1?: parameters["rowFilter.userbuilds.effect_1"];
          effect_2?: parameters["rowFilter.userbuilds.effect_2"];
          effect_3?: parameters["rowFilter.userbuilds.effect_3"];
          accuracy?: parameters["rowFilter.userbuilds.accuracy"];
          crit_rate_bonus?: parameters["rowFilter.userbuilds.crit_rate_bonus"];
          action_speed?: parameters["rowFilter.userbuilds.action_speed"];
          mv?: parameters["rowFilter.userbuilds.mv"];
          critable?: parameters["rowFilter.userbuilds.critable"];
          ai_use?: parameters["rowFilter.userbuilds.ai_use"];
          other_mods?: parameters["rowFilter.userbuilds.other_mods"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["userbuilds"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
}

export interface definitions {
  abilities: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    ability_name: string;
    description?: string;
  };
  actypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    acquisition_type: string;
  };
  attacktypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    attack_type: string;
  };
  buildinfo: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    build_id: string;
    build_name: string;
    /**
     * Note:
     * This is a Foreign Key to `monsters.m_id`.<fk table='monsters' column='m_id'/>
     */
    monstie: number;
    creator_id?: string;
  };
  buildpiece: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `buildinfo.build_id`.<fk table='buildinfo' column='build_id'/>
     */
    build_id: string;
    /**
     * Note:
     * This is a Foreign Key to `genes.g_id`.<fk table='genes' column='g_id'/>
     */
    g_id?: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    place: number;
  };
  egg: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `monsters.m_id`.<fk table='monsters' column='m_id'/>
     */
    m_id: number;
    /**
     * Note:
     * This is a Foreign Key to `eggpattern.pattern_type`.<fk table='eggpattern' column='pattern_type'/>
     */
    pattern_type?: string;
    bg_color?: string;
    pattern_color?: string;
    meta_colors?: string;
  };
  eggpattern: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    pattern_type: string;
  };
  elements: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    element_type: string;
  };
  gene_skills: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    g_id?: number;
    gene_name?: string;
    /**
     * Note:
     * This is a Foreign Key to `sizes.size_abbr`.<fk table='sizes' column='size_abbr'/>
     */
    size_abbr?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `attacktypes.attack_type`.<fk table='attacktypes' column='attack_type'/>
     */
    attack_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `traittypes.trait_type`.<fk table='traittypes' column='trait_type'/>
     */
    trait_type?: string;
    required_lvl?: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    skill_name?: string;
    kinship_cost?: number;
    /**
     * Note:
     * This is a Foreign Key to `targettypes.target`.<fk table='targettypes' column='target'/>
     */
    target?: string;
    description?: string;
    upgrade_0?: string;
    upgrade_1?: string;
    upgrade_2?: string;
    effect_1?: string;
    effect_2?: string;
    effect_3?: string;
    accuracy?: number;
    crit_rate_bonus?: number;
    action_speed?: number;
    mv?: number;
    critable?: boolean;
    ai_use?: boolean;
    other_mods?: string;
  };
  genes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    g_id: number;
    gene_name: string;
    required_lvl?: number;
    gene_number?: number;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `attacktypes.attack_type`.<fk table='attacktypes' column='attack_type'/>
     */
    attack_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `sizes.size_abbr`.<fk table='sizes' column='size_abbr'/>
     */
    size_abbr?: string;
    /**
     * Note:
     * This is a Foreign Key to `traittypes.trait_type`.<fk table='traittypes' column='trait_type'/>
     */
    trait_type?: string;
    legal: boolean;
  };
  genus: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    genus_type: string;
  };
  monsters: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    m_id: number;
    monster_name: string;
    /**
     * Note:
     * This is a Foreign Key to `abilities.ability_name`.<fk table='abilities' column='ability_name'/>
     */
    ability_1?: string;
    /**
     * Note:
     * This is a Foreign Key to `abilities.ability_name`.<fk table='abilities' column='ability_name'/>
     */
    ability_2?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_strength?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_weakness?: string;
    /**
     * Note:
     * This is a Foreign Key to `attacktypes.attack_type`.<fk table='attacktypes' column='attack_type'/>
     */
    attack_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `genus.genus_type`.<fk table='genus' column='genus_type'/>
     */
    genus?: string;
    rarity?: number;
    habitat?: string;
    hatchable?: boolean;
    retreat_condition?: string;
    img_url?: string;
  };
  monsters_data: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    m_id?: number;
    monster_name?: string;
    /**
     * Note:
     * This is a Foreign Key to `abilities.ability_name`.<fk table='abilities' column='ability_name'/>
     */
    ability_1?: string;
    /**
     * Note:
     * This is a Foreign Key to `abilities.ability_name`.<fk table='abilities' column='ability_name'/>
     */
    ability_2?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_strength?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_weakness?: string;
    /**
     * Note:
     * This is a Foreign Key to `attacktypes.attack_type`.<fk table='attacktypes' column='attack_type'/>
     */
    attack_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `genus.genus_type`.<fk table='genus' column='genus_type'/>
     */
    genus?: string;
    rarity?: number;
    hatchable?: boolean;
    habitat?: string;
    retreat_condition?: string;
    img_url?: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `stattypes.stat_type`.<fk table='stattypes' column='stat_type'/>
     */
    stat_type?: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    lvl?: number;
    speed?: number;
    crit?: number;
    hp?: number;
    recovery?: number;
    fire?: number;
    water?: number;
    ice?: number;
    thunder?: number;
    dragon?: number;
    non_elemental?: number;
    /**
     * Note:
     * This is a Foreign Key to `eggpattern.pattern_type`.<fk table='eggpattern' column='pattern_type'/>
     */
    pattern_type?: string;
    bg_color?: string;
    pattern_color?: string;
    meta_colors?: string;
  };
  sizes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    size_abbr: string;
    size_value: number;
  };
  skills: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    skill_name: string;
    /**
     * Note:
     * This is a Foreign Key to `targettypes.target`.<fk table='targettypes' column='target'/>
     */
    target?: string;
    kinship_cost?: number;
    other_mods?: string;
    mv?: number;
    action_speed?: number;
    accuracy?: number;
    critable?: boolean;
    crit_rate_bonus?: number;
    ai_use?: boolean;
    description?: string;
    upgrade_0?: string;
    upgrade_1?: string;
    upgrade_2?: string;
    effect_1?: string;
    effect_2?: string;
    effect_3?: string;
    /**
     * Note:
     * This is a Foreign Key to `genes.g_id`.<fk table='genes' column='g_id'/>
     */
    g_id?: number;
  };
  statline: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `monsters.m_id`.<fk table='monsters' column='m_id'/>
     */
    m_id: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `stattypes.stat_type`.<fk table='stattypes' column='stat_type'/>
     */
    stat_type: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    lvl: number;
    speed?: number;
    crit?: number;
    hp?: number;
    recovery?: number;
    fire?: number;
    water?: number;
    ice?: number;
    thunder?: number;
    dragon?: number;
    non_elemental?: number;
  };
  stattypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    stat_type: string;
  };
  targettypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    target: string;
  };
  traittypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    trait_type: string;
  };
  userbuilds: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    build_id?: string;
    build_name?: string;
    /**
     * Note:
     * This is a Foreign Key to `monsters.m_id`.<fk table='monsters' column='m_id'/>
     */
    monstie?: number;
    creator_id?: string;
    /**
     * Note:
     * This is a Foreign Key to `genes.g_id`.<fk table='genes' column='g_id'/>
     */
    g_id?: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    place?: number;
    gene_name?: string;
    /**
     * Note:
     * This is a Foreign Key to `sizes.size_abbr`.<fk table='sizes' column='size_abbr'/>
     */
    size_abbr?: string;
    /**
     * Note:
     * This is a Foreign Key to `elements.element_type`.<fk table='elements' column='element_type'/>
     */
    element_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `attacktypes.attack_type`.<fk table='attacktypes' column='attack_type'/>
     */
    attack_type?: string;
    /**
     * Note:
     * This is a Foreign Key to `traittypes.trait_type`.<fk table='traittypes' column='trait_type'/>
     */
    trait_type?: string;
    required_lvl?: number;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    skill_name?: string;
    kinship_cost?: number;
    /**
     * Note:
     * This is a Foreign Key to `targettypes.target`.<fk table='targettypes' column='target'/>
     */
    target?: string;
    description?: string;
    upgrade_0?: string;
    upgrade_1?: string;
    upgrade_2?: string;
    effect_1?: string;
    effect_2?: string;
    effect_3?: string;
    accuracy?: number;
    crit_rate_bonus?: number;
    action_speed?: number;
    mv?: number;
    critable?: boolean;
    ai_use?: boolean;
    other_mods?: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** abilities */
  "body.abilities": definitions["abilities"];
  "rowFilter.abilities.ability_name": string;
  "rowFilter.abilities.description": string;
  /** actypes */
  "body.actypes": definitions["actypes"];
  "rowFilter.actypes.acquisition_type": string;
  /** attacktypes */
  "body.attacktypes": definitions["attacktypes"];
  "rowFilter.attacktypes.attack_type": string;
  /** buildinfo */
  "body.buildinfo": definitions["buildinfo"];
  "rowFilter.buildinfo.build_id": string;
  "rowFilter.buildinfo.build_name": string;
  "rowFilter.buildinfo.monstie": string;
  "rowFilter.buildinfo.creator_id": string;
  /** buildpiece */
  "body.buildpiece": definitions["buildpiece"];
  "rowFilter.buildpiece.build_id": string;
  "rowFilter.buildpiece.g_id": string;
  "rowFilter.buildpiece.place": string;
  /** egg */
  "body.egg": definitions["egg"];
  "rowFilter.egg.m_id": string;
  "rowFilter.egg.pattern_type": string;
  "rowFilter.egg.bg_color": string;
  "rowFilter.egg.pattern_color": string;
  "rowFilter.egg.meta_colors": string;
  /** eggpattern */
  "body.eggpattern": definitions["eggpattern"];
  "rowFilter.eggpattern.pattern_type": string;
  /** elements */
  "body.elements": definitions["elements"];
  "rowFilter.elements.element_type": string;
  /** gene_skills */
  "body.gene_skills": definitions["gene_skills"];
  "rowFilter.gene_skills.g_id": string;
  "rowFilter.gene_skills.gene_name": string;
  "rowFilter.gene_skills.size_abbr": string;
  "rowFilter.gene_skills.element_type": string;
  "rowFilter.gene_skills.attack_type": string;
  "rowFilter.gene_skills.trait_type": string;
  "rowFilter.gene_skills.required_lvl": string;
  "rowFilter.gene_skills.skill_name": string;
  "rowFilter.gene_skills.kinship_cost": string;
  "rowFilter.gene_skills.target": string;
  "rowFilter.gene_skills.description": string;
  "rowFilter.gene_skills.upgrade_0": string;
  "rowFilter.gene_skills.upgrade_1": string;
  "rowFilter.gene_skills.upgrade_2": string;
  "rowFilter.gene_skills.effect_1": string;
  "rowFilter.gene_skills.effect_2": string;
  "rowFilter.gene_skills.effect_3": string;
  "rowFilter.gene_skills.accuracy": string;
  "rowFilter.gene_skills.crit_rate_bonus": string;
  "rowFilter.gene_skills.action_speed": string;
  "rowFilter.gene_skills.mv": string;
  "rowFilter.gene_skills.critable": string;
  "rowFilter.gene_skills.ai_use": string;
  "rowFilter.gene_skills.other_mods": string;
  /** genes */
  "body.genes": definitions["genes"];
  "rowFilter.genes.g_id": string;
  "rowFilter.genes.gene_name": string;
  "rowFilter.genes.required_lvl": string;
  "rowFilter.genes.gene_number": string;
  "rowFilter.genes.element_type": string;
  "rowFilter.genes.attack_type": string;
  "rowFilter.genes.size_abbr": string;
  "rowFilter.genes.trait_type": string;
  "rowFilter.genes.legal": string;
  /** genus */
  "body.genus": definitions["genus"];
  "rowFilter.genus.genus_type": string;
  /** monsters */
  "body.monsters": definitions["monsters"];
  "rowFilter.monsters.m_id": string;
  "rowFilter.monsters.monster_name": string;
  "rowFilter.monsters.ability_1": string;
  "rowFilter.monsters.ability_2": string;
  "rowFilter.monsters.element_strength": string;
  "rowFilter.monsters.element_weakness": string;
  "rowFilter.monsters.attack_type": string;
  "rowFilter.monsters.genus": string;
  "rowFilter.monsters.rarity": string;
  "rowFilter.monsters.habitat": string;
  "rowFilter.monsters.hatchable": string;
  "rowFilter.monsters.retreat_condition": string;
  "rowFilter.monsters.img_url": string;
  /** monsters_data */
  "body.monsters_data": definitions["monsters_data"];
  "rowFilter.monsters_data.m_id": string;
  "rowFilter.monsters_data.monster_name": string;
  "rowFilter.monsters_data.ability_1": string;
  "rowFilter.monsters_data.ability_2": string;
  "rowFilter.monsters_data.element_strength": string;
  "rowFilter.monsters_data.element_weakness": string;
  "rowFilter.monsters_data.attack_type": string;
  "rowFilter.monsters_data.genus": string;
  "rowFilter.monsters_data.rarity": string;
  "rowFilter.monsters_data.hatchable": string;
  "rowFilter.monsters_data.habitat": string;
  "rowFilter.monsters_data.retreat_condition": string;
  "rowFilter.monsters_data.img_url": string;
  "rowFilter.monsters_data.stat_type": string;
  "rowFilter.monsters_data.lvl": string;
  "rowFilter.monsters_data.speed": string;
  "rowFilter.monsters_data.crit": string;
  "rowFilter.monsters_data.hp": string;
  "rowFilter.monsters_data.recovery": string;
  "rowFilter.monsters_data.fire": string;
  "rowFilter.monsters_data.water": string;
  "rowFilter.monsters_data.ice": string;
  "rowFilter.monsters_data.thunder": string;
  "rowFilter.monsters_data.dragon": string;
  "rowFilter.monsters_data.non_elemental": string;
  "rowFilter.monsters_data.pattern_type": string;
  "rowFilter.monsters_data.bg_color": string;
  "rowFilter.monsters_data.pattern_color": string;
  "rowFilter.monsters_data.meta_colors": string;
  /** sizes */
  "body.sizes": definitions["sizes"];
  "rowFilter.sizes.size_abbr": string;
  "rowFilter.sizes.size_value": string;
  /** skills */
  "body.skills": definitions["skills"];
  "rowFilter.skills.skill_name": string;
  "rowFilter.skills.target": string;
  "rowFilter.skills.kinship_cost": string;
  "rowFilter.skills.other_mods": string;
  "rowFilter.skills.mv": string;
  "rowFilter.skills.action_speed": string;
  "rowFilter.skills.accuracy": string;
  "rowFilter.skills.critable": string;
  "rowFilter.skills.crit_rate_bonus": string;
  "rowFilter.skills.ai_use": string;
  "rowFilter.skills.description": string;
  "rowFilter.skills.upgrade_0": string;
  "rowFilter.skills.upgrade_1": string;
  "rowFilter.skills.upgrade_2": string;
  "rowFilter.skills.effect_1": string;
  "rowFilter.skills.effect_2": string;
  "rowFilter.skills.effect_3": string;
  "rowFilter.skills.g_id": string;
  /** statline */
  "body.statline": definitions["statline"];
  "rowFilter.statline.m_id": string;
  "rowFilter.statline.stat_type": string;
  "rowFilter.statline.lvl": string;
  "rowFilter.statline.speed": string;
  "rowFilter.statline.crit": string;
  "rowFilter.statline.hp": string;
  "rowFilter.statline.recovery": string;
  "rowFilter.statline.fire": string;
  "rowFilter.statline.water": string;
  "rowFilter.statline.ice": string;
  "rowFilter.statline.thunder": string;
  "rowFilter.statline.dragon": string;
  "rowFilter.statline.non_elemental": string;
  /** stattypes */
  "body.stattypes": definitions["stattypes"];
  "rowFilter.stattypes.stat_type": string;
  /** targettypes */
  "body.targettypes": definitions["targettypes"];
  "rowFilter.targettypes.target": string;
  /** traittypes */
  "body.traittypes": definitions["traittypes"];
  "rowFilter.traittypes.trait_type": string;
  /** userbuilds */
  "body.userbuilds": definitions["userbuilds"];
  "rowFilter.userbuilds.build_id": string;
  "rowFilter.userbuilds.build_name": string;
  "rowFilter.userbuilds.monstie": string;
  "rowFilter.userbuilds.creator_id": string;
  "rowFilter.userbuilds.g_id": string;
  "rowFilter.userbuilds.place": string;
  "rowFilter.userbuilds.gene_name": string;
  "rowFilter.userbuilds.size_abbr": string;
  "rowFilter.userbuilds.element_type": string;
  "rowFilter.userbuilds.attack_type": string;
  "rowFilter.userbuilds.trait_type": string;
  "rowFilter.userbuilds.required_lvl": string;
  "rowFilter.userbuilds.skill_name": string;
  "rowFilter.userbuilds.kinship_cost": string;
  "rowFilter.userbuilds.target": string;
  "rowFilter.userbuilds.description": string;
  "rowFilter.userbuilds.upgrade_0": string;
  "rowFilter.userbuilds.upgrade_1": string;
  "rowFilter.userbuilds.upgrade_2": string;
  "rowFilter.userbuilds.effect_1": string;
  "rowFilter.userbuilds.effect_2": string;
  "rowFilter.userbuilds.effect_3": string;
  "rowFilter.userbuilds.accuracy": string;
  "rowFilter.userbuilds.crit_rate_bonus": string;
  "rowFilter.userbuilds.action_speed": string;
  "rowFilter.userbuilds.mv": string;
  "rowFilter.userbuilds.critable": string;
  "rowFilter.userbuilds.ai_use": string;
  "rowFilter.userbuilds.other_mods": string;
}

export interface operations {}

export interface external {}
